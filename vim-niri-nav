#!/bin/sh
#
# vim-niri-nav - Use the same bindings to move focus between niri windows and
# vim splits. Requires the accompanying vim plugin.

dir="$1"
timeout="${VIM_NIRI_NAV_TIMEOUT:-0.1s}"

case "$dir" in
up) ;;
right) ;;
down) ;;
left) ;;
*)
  echo "USAGE: $0 up|right|down|left"
  exit 1
  ;;
esac

get_descendant_vim_pid() {
  pid="$1"
  terms="$2"

  if grep -iqE '^g?(view|n?vim?x?)(diff)?$' "/proc/$pid/comm"; then
    if embed_pid="$(pgrep --parent "$pid" --full 'nvim --embed')"; then
      echo "$embed_pid"
    else
      echo "$pid"
    fi

    return 0
  fi

  for child in $(pgrep --runstates D,I,R,S --terminal "$terms" --parent "$pid"); do
    if get_descendant_vim_pid "$child" "$terms"; then
      # already echo'd PID in recursive call
      return 0
    fi
  done

  return 1
}

with_timeout() {
  if [ -n "$timeout" ] && [ "$timeout" != 0 ] && command -v timeout >/dev/null 2>&1; then
    timeout "$timeout" "$@"
  else
    "$@"
  fi
}

vim_remote_expr() {
  if [ "$program" = vim ]; then
    with_timeout vim --servername "$servername" --remote-expr "$@"
  elif [ "$program" = nvim ]; then
    with_timeout nvim --headless --server "$servername" --remote-expr "$@"
  fi
}

if focused_pid="$(niri msg --json focused-window | jq -e '.pid')"; then
  terms="$(find /dev/pts -type c -not -name ptmx | sed s#^/dev/## | tr '\n' ,)"
  if vim_pid="$(get_descendant_vim_pid "$focused_pid" "$terms")"; then
    servername_file="${XDG_RUNTIME_DIR:-/tmp}/vim-niri-nav.$vim_pid.servername"
    read -r program servername <"$servername_file"

    if [ -n "$servername" ]; then
      did_nav_in_vim=$(vim_remote_expr "VimNiriNav('$dir', 1)")
      [ "$did_nav_in_vim" = "true" ] && exit 0
    fi
  fi
fi

swaymsg focus "$dir"
